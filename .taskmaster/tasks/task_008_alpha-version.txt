# Task ID: 8
# Title: Implement SEO Optimization
# Status: done
# Dependencies: 2, 3, 7
# Priority: medium
# Description: Implement SEO features to optimize the site for search engines, particularly for terms related to 'Python AWS developer'.
# Details:
1. Create a system to automatically generate meta tags for each page (FR20):
   - Title tags
   - Meta descriptions
   - Open Graph tags for social sharing
   - Twitter card tags
2. Implement canonical URLs
3. Create a sitemap.xml generator
4. Implement structured data (JSON-LD) for:
   - Person information
   - Professional experience
   - Skills
5. Optimize heading hierarchy across the site
6. Implement alt text for all images
7. Create a robots.txt file
8. Ensure proper semantic HTML throughout the site

# Test Strategy:
Use tools like Google's Structured Data Testing Tool to verify JSON-LD implementation. Test meta tags generation for various page types. Validate the sitemap.xml format. Use Lighthouse to test SEO score (target >90 as per SM6). Verify that all images have appropriate alt text. Check that canonical URLs are correctly implemented.

# Subtasks:
## 1. Create a centralized SEO component for Meta Tags and Canonical URLs [done]
### Dependencies: None
### Description: Develop a reusable Astro component (e.g., `Seo.astro`) that dynamically generates essential meta tags. This component will be integrated into the main `BaseLayout.astro` to ensure all pages have proper SEO metadata.
### Details:
The `Seo.astro` component should accept props like `title`, `description`, `image`, `canonicalURL`, and `type` (e.g., 'website', 'article'). It must generate: 
- `<title>` tag (formatted as 'Page Title | Sofia Escobedo - Python & AWS Developer')
- `<meta name="description">`
- `<link rel="canonical">` to the page's absolute URL.
- Open Graph tags (`og:title`, `og:description`, `og:image`, `og:url`, `og:type`)
- Twitter Card tags (`twitter:card`, `twitter:title`, `twitter:description`, `twitter:image`).
Update `BaseLayout.astro` to use this component, passing data from the page's frontmatter or props.

## 2. Implement sitemap.xml and robots.txt [done]
### Dependencies: None
### Description: Configure the project to automatically generate a `sitemap.xml` file and create a `robots.txt` file to guide search engine crawlers.
### Details:
1. Install and configure the official Astro sitemap integration (`@astrojs/sitemap`) in the `astro.config.mjs` file. Ensure the `site` property is correctly set to the production domain. 
2. Create a `robots.txt` file in the `public/` directory. The file should allow crawling for all user agents (`User-agent: *`, `Allow: /`) and include a line pointing to the sitemap's location (e.g., `Sitemap: https://your-domain.com/sitemap-index.xml`).

## 3. Implement JSON-LD Structured Data for Person and Profile [done]
### Dependencies: 8.1
### Description: Create and inject JSON-LD structured data into the homepage to provide rich context about Sofia Escobedo to search engines.
### Details:
Create a new component, `JsonLD.astro`, to generate a `<script type="application/ld+json">` tag. On the homepage (`src/pages/index.astro`), use this component to output a `Person` schema. This schema should include `name`, `url` (portfolio link), `sameAs` (links to LinkedIn, GitHub), `jobTitle` ('Python & AWS Developer'), and `alumniOf`. You can also nest or add a `WebSite` schema. The data should be stored in a central config file (e.g., `src/config.ts`) for easy management.

## 4. Audit and Implement Alt Text for All Images [done]
### Dependencies: None
### Description: Conduct a site-wide audit to ensure every `<img>` tag and Astro `<Image>` component has meaningful and descriptive `alt` text for accessibility and SEO.
### Details:
Review all `.astro` files in `src/components` and `src/pages`. Pay special attention to components that render images, such as `FeaturedWork.astro` (project thumbnails) and `Certifications.astro` (certification badges). For dynamic images from Markdown frontmatter, ensure the `alt` text is either included in the frontmatter or derived from the project title. For static images like logos or UI elements, add descriptive static `alt` attributes.

## 5. Optimize Heading Hierarchy and Semantic HTML Structure [done]
### Dependencies: None
### Description: Audit and refactor the site's HTML to ensure a logical heading hierarchy (H1-H6) and the correct use of semantic elements like `<main>`, `<section>`, and `<article>`.
### Details:
1. **Heading Audit:** Review `BaseLayout.astro`, `index.astro`, and the project detail page template (`src/pages/work/[...slug].astro`). Ensure there is strictly one `<h1>` per page (typically the page title). Subsequent headings should follow a logical order (`<h2>`, `<h3>`, etc.) without skipping levels. 
2. **Semantic HTML:** Verify that the main content of each page is wrapped in a `<main>` tag. Use `<section>` for distinct sections on the homepage (e.g., 'Featured Work', 'About Me'). Use the `<article>` tag for self-contained content, such as individual project entries on the work detail page.

