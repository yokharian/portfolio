{
  "default": {
    "tasks": [
      {
        "id": 1,
        "title": "Project Setup and Repository Configuration",
        "description": "Initialize the project repository with the basic structure and configuration files needed for development.",
        "details": "1. Create a new repository at github.com/yokharian/portfolio\n2. Initialize the project with package.json\n3. Set up Tailwind CSS configuration\n4. Configure a static site generator (Astro or 11ty recommended based on Markdown requirements)\n5. Create the basic folder structure:\n   - src/\n     - pages/\n     - layouts/\n     - components/\n     - styles/\n   - public/\n     - images/\n   - content/\n     - projects/\n6. Set up Git hooks for code quality\n7. Create a README.md with project documentation\n<info added on 2025-09-12T17:53:07.892Z>\n## Implementation Details\n\nEleventy (11ty) has been implemented as the static site generator with the following configuration:\n\n### Project Structure\n- `.eleventy.js`: Configured with passthrough copy for /public, directory structure (input: \".\", includes/layouts in src/layouts, data in src/data, output to _site), and a \"posts\" collection from blog_posts/**/*.md\n- `.eleventyignore`: Excludes node_modules, _site, .taskmaster, UI_UX_GUIDE\n- `tailwind.config.js`: Scans **/*.{html,njk,md} files with appropriate exclusions\n- `src/layouts/base.njk`: Base HTML template with CSS link\n- `src/pages/index.njk`: Homepage that lists posts from the \"posts\" collection\n- `src/styles/tailwind.css`: Tailwind entry point with base/components/utilities\n- `public/assets/.gitkeep` and `public/images/.gitkeep`: Placeholder files for static assets\n\n### Package Configuration\n- `package.json`: Includes development scripts:\n  - `dev`: Runs 11ty in serve mode with Tailwind watch\n  - `build`: Full production build\n  - `build:css`: Tailwind CSS compilation\n  - `clean`: Removes build artifacts\n- Dependencies: @11ty/eleventy, tailwindcss, postcss, autoprefixer, npm-run-all, rimraf\n\n### Documentation\n- `README.md`: Contains quick start guide, project structure explanation, and next steps\n\n### Pending Items\n- Git hooks setup (awaiting preference on husky/lint-staged)\n- Additional structure components (src/components, content/projects)\n- Confirmation needed on 11ty as the chosen SSG (vs Astro)\n</info added on 2025-09-12T17:53:07.892Z>\n<info added on 2025-09-12T17:55:49.670Z>\n## Implementation Update: 11ty Core Features\n\n### New Components Added\n- `src/data/site.json`: Central configuration for site constants including:\n  - Contact information (Calendly URL, GitHub, LinkedIn, email)\n  - Site titles and default meta description\n  - Other global variables for templates\n\n- `src/layouts/base.njk`: Enhanced with:\n  - Header featuring Sofia Escobedo's name\n  - Primary CTA button linking to Calendly\n  - Social media links (GitHub, LinkedIn)\n  - SEO meta tags for title and description\n  - Improved footer with contact information\n\n- `src/layouts/post.njk`: Project template with:\n  - Banner image display\n  - Employer and date information\n  - Technology tags display\n  - Lazy-loaded images for performance\n  - Tailwind prose styling for Markdown content\n\n- `blog_posts/posts.json`: Directory data file that:\n  - Applies post.njk as default layout for all Markdown files in blog_posts/\n\n### Progress Notes\n- Homepage now lists posts from the 11ty collection\n- Pending implementation:\n  - Featured Work section with hover effects (FR7-FR9)\n  - SEO enhancements\n  - Language switching functionality (FR5)\n  - Need specification on pairing English/Spanish content\n\n### Verification Steps\n1. npm install\n2. npm run dev (http://localhost:8080) or npm run build (check _site/)\n3. Verify blog_posts/*.md render with new layout and header/footer display CTA and links\n</info added on 2025-09-12T17:55:49.670Z>\n<info added on 2025-09-12T19:07:52.244Z>\n## Implementation Completion Update\n\n### Git Hooks Configuration\n- Implemented Husky for Git hooks management\n- Added pre-commit hook that runs `npm run build` to ensure code quality\n- Updated package.json with `prepare` script for automatic hooks installation\n\n### Directory Structure Completion\n- Created placeholder directories:\n  - `src/components/` for reusable UI components\n  - `content/projects/` for project content files\n\n### Documentation & Verification\n- README.md updated with quick start guide and project structure\n- Git hooks automatically activate upon `npm install`\n- Build scripts verified and working correctly\n\n### Status Update\n- All initial setup requirements completed\n- 11ty confirmed as the chosen static site generator\n- Project ready for downstream tasks (content creation and template development)\n</info added on 2025-09-12T19:07:52.244Z>",
        "testStrategy": "Verify that the repository is properly initialized with all configuration files. Test the build process to ensure it correctly processes Markdown files and generates static HTML. Confirm that Tailwind CSS is properly configured by testing a simple component with Tailwind classes.",
        "priority": "high",
        "dependencies": [],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Configure homepage site at root",
            "description": "Visitors shouldn't follow a complex directory structure. There are only two allowed levels: /<homepage> and /blog/<post>",
            "details": "",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 1
          }
        ]
      },
      {
        "id": 2,
        "title": "Implement Base Layout Components",
        "description": "Create the base layout components that will be used across all pages, including header and footer with required links.",
        "details": "1. Create a main layout component that includes:\n   - HTML5 boilerplate with proper meta tags\n   - Responsive viewport settings\n   - Tailwind CSS imports\n2. Implement the header component with:\n   - Sofia Escobedo's name as per FR2\n   - Primary CTA button 'Agendar llamada de 30 min' linking to Calendly (FR3)\n   - Language switcher (FR5)\n3. Implement the footer component with:\n   - Links to GitHub, LinkedIn profiles\n   - Calendly link\n   - Email contact (mailto: link)\n   - Copyright information\n4. Create a responsive navigation system\n5. Implement language switching functionality (English/Spanish toggle)",
        "testStrategy": "Test the layout components in different viewport sizes to ensure responsiveness. Verify that all links in the header and footer are working correctly. Test the language switcher to ensure it properly changes the displayed language. Validate HTML structure for accessibility and SEO best practices.",
        "priority": "high",
        "dependencies": [
          1
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Create base.njk layout template",
            "description": "Implement the main layout template that will serve as the foundation for all pages, including proper HTML5 structure and metadata.",
            "dependencies": [],
            "details": "Create src/_includes/layouts/base.njk with: 1) HTML5 doctype and structure, 2) <head> section with meta charset, viewport settings, title tag using {{ title }} variable with fallback, 3) link to /assets/styles.css for Tailwind, 4) lang attribute on <html> tag using {{ page.lang }} or site.defaultLanguage, 5) <body> with {% block content %}{% endblock %} for page-specific content.",
            "status": "done",
            "testStrategy": "Validate HTML structure using W3C validator. Test with different viewport sizes to verify responsive meta tag. Verify CSS is properly linked by checking styles are applied."
          },
          {
            "id": 2,
            "title": "Implement header partial with navigation",
            "description": "Create a responsive header component with site title, primary CTA button, and language switcher UI.",
            "dependencies": [],
            "details": "Create src/_includes/partials/header.njk containing: 1) Site title 'Sofia Escobedo' as main heading, 2) Primary CTA button with text 'Agendar llamada de 30 min' linking to a Calendly URL (use {{ site.calendlyUrl }} from data file), 3) Basic navigation menu with responsive design, 4) Language switcher with EN/ES options (stub links for now, full functionality in Task 10).",
            "status": "done",
            "testStrategy": "Test header display at multiple viewport sizes. Verify CTA button links to correct Calendly URL. Check that language switcher options are visible."
          },
          {
            "id": 3,
            "title": "Implement footer partial with social links",
            "description": "Create a footer component with social media links, contact information, and copyright notice.",
            "dependencies": [],
            "details": "Create src/_includes/partials/footer.njk containing: 1) Social media links to GitHub and LinkedIn using {{ site.githubUrl }} and {{ site.linkedinUrl }} from data files, 2) Calendly link using {{ site.calendlyUrl }}, 3) Email contact using mailto: with {{ site.email }}, 4) Copyright information with dynamic year using {% year = new Date().getFullYear() %} and site owner name.",
            "status": "done",
            "testStrategy": "Verify all links in footer point to correct URLs. Test mailto link functionality. Check that current year is displayed correctly in copyright notice."
          },
          {
            "id": 4,
            "title": "Create site data configuration files",
            "description": "Set up data files to store site-wide configuration and variables used in layout components.",
            "dependencies": [],
            "details": "Create src/_data/site.json with the following properties: 1) title: 'Sofia Escobedo', 2) description: 'Python AWS Developer', 3) defaultLanguage: 'en', 4) githubUrl: 'https://github.com/yourusername' (placeholder), 5) linkedinUrl: 'https://linkedin.com/in/yourusername' (placeholder), 6) calendlyUrl: 'https://calendly.com/yourusername' (placeholder), 7) email: 'your.email@example.com' (placeholder).",
            "status": "done",
            "testStrategy": "Verify data file is valid JSON. Test that values are correctly accessed in templates."
          },
          {
            "id": 5,
            "title": "Wire layouts and verify build process",
            "description": "Connect all layout components together, implement index page, and verify the build process works correctly.",
            "dependencies": [
              "2.1",
              "2.2",
              "2.3",
              "2.4"
            ],
            "details": "1) Include header/footer in base.njk using {% include \"partials/header.njk\" %} and {% include \"partials/footer.njk\" %}, 2) Create src/index.njk that extends base.njk with {% extends \"layouts/base.njk\" %} and minimal content in {% block content %}, 3) Update package.json with build scripts if needed, 4) Run build process to generate _site directory, 5) Verify generated HTML contains all expected elements and correct structure.",
            "status": "done",
            "testStrategy": "Run build process and verify no errors. Check generated _site/index.html contains header, footer, and all links. Test page in browser to ensure layout displays correctly."
          }
        ]
      },
      {
        "id": 3,
        "title": "Develop Markdown Processing System",
        "description": "Create a system to process Markdown files with frontmatter for project content, extracting metadata and generating HTML pages.",
        "details": "1. Set up a Markdown parser with frontmatter support\n2. Create a schema for project frontmatter that includes:\n   - title\n   - description\n   - employer\n   - startDate\n   - endDate\n   - tags (technologies)\n   - heroImage\n   - language\n3. Implement a function to extract and validate frontmatter data\n4. Create a template for rendering project pages that includes:\n   - Hero banner with project image\n   - Metadata display section\n   - Main content area with proper typography\n   - 'Technologies Used' section generated from tags\n5. Implement the Markdown to HTML conversion process\n6. Set up the build process to generate a static HTML page for each Markdown file",
        "testStrategy": "Create test Markdown files with various frontmatter configurations to verify the extraction process. Test the rendering of Markdown content with different elements (headings, lists, code blocks, etc.). Verify that the generated HTML pages maintain the correct structure and styling. Test with both English and Spanish content to ensure proper language handling.",
        "priority": "high",
        "dependencies": [
          1
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Set up Markdown Parser with Frontmatter Support",
            "description": "Select and integrate a Markdown parser library that supports frontmatter extraction. Configure it with safe defaults for the project.",
            "dependencies": [],
            "details": "Research and select a suitable Markdown parser (recommend remark.js or gray-matter). Install the chosen library and create a utility module that exposes a function to parse Markdown content. Configure the parser with safe defaults for HTML sanitization and frontmatter extraction. Include error handling for malformed Markdown files.",
            "status": "done",
            "testStrategy": "Create test cases with valid and invalid Markdown files. Verify the parser correctly extracts frontmatter and converts Markdown to HTML. Test error handling with malformed inputs."
          },
          {
            "id": 2,
            "title": "Define Frontmatter Schema with Type Definitions",
            "description": "Create a schema for project frontmatter with proper type definitions, required/optional rules, and default values.",
            "dependencies": [
              "3.1"
            ],
            "details": "Define a TypeScript interface or schema object for frontmatter that includes: title (string, required), description (string, required), employer (string, optional), startDate (ISO date string, required), endDate (ISO date string, optional), tags (array of strings, required), heroImage (string path, required), language (string enum, required), slug (string, optional), featured (boolean, optional). Include documentation for each field and specify default values where appropriate.",
            "status": "done",
            "testStrategy": "Create test cases to validate the schema against various frontmatter examples. Verify required fields are enforced and optional fields have proper defaults."
          },
          {
            "id": 3,
            "title": "Implement Frontmatter Validation Function",
            "description": "Create a validation function that checks frontmatter data against the schema and provides helpful error messages.",
            "dependencies": [
              "3.2"
            ],
            "details": "Implement a validation function that takes extracted frontmatter data and validates it against the defined schema. Include checks for required fields, data types, and format validation (e.g., ISO dates). Generate helpful error messages that indicate which fields are missing or invalid. Provide sensible defaults for optional fields when not provided.",
            "status": "done",
            "testStrategy": "Test with valid frontmatter, missing required fields, invalid data types, and malformed dates. Verify error messages are clear and helpful."
          },
          {
            "id": 4,
            "title": "Implement Content Discovery System",
            "description": "Create a system to scan the content directory for Markdown files and build a collection of project data.",
            "dependencies": [
              "3.1",
              "3.3"
            ],
            "details": "Implement a function that recursively scans the content/projects/ directory (or similar) for Markdown files. For each file, extract and validate the frontmatter, storing the results in a collection. Include file path information and generate slugs based on filename or frontmatter. Handle errors gracefully, logging issues but continuing to process valid files.",
            "status": "done",
            "testStrategy": "Test with a directory containing multiple Markdown files, including some with invalid frontmatter. Verify all valid files are discovered and processed correctly."
          },
          {
            "id": 5,
            "title": "Enhance Markdown to HTML Conversion",
            "description": "Implement advanced Markdown to HTML conversion with support for code blocks, tables, images, and properly configured external links.",
            "dependencies": [
              "3.1"
            ],
            "details": "Extend the basic Markdown parser to support syntax highlighting for code blocks, properly formatted tables, responsive images, and external links that open in new tabs with appropriate rel attributes (noopener, noreferrer). Configure the parser to maintain heading hierarchy and generate anchor IDs for headings. Implement custom renderers for specific Markdown elements if needed.",
            "status": "done",
            "testStrategy": "Create test Markdown files with various elements (code blocks, tables, images, links). Verify the generated HTML includes proper syntax highlighting, responsive image attributes, and correctly configured external links."
          },
          {
            "id": 6,
            "title": "Create Project Page Template with Component Sections",
            "description": "Develop a template for project pages that includes hero image, metadata section, content area, and technology tags.",
            "dependencies": [
              "3.5"
            ],
            "details": "Create a template/layout for project pages that integrates with Task 7 (Project Page Template). Include sections for: hero image banner, project metadata display (title, dates, employer), main content area with proper typography (using Tailwind prose), and a 'Technologies Used' section generated from tags. Ensure the template is responsive and follows accessibility best practices.",
            "status": "done",
            "testStrategy": "Test the template with various project data to ensure all sections render correctly. Verify responsive behavior across different screen sizes. Check accessibility with automated tools."
          },
          {
            "id": 7,
            "title": "Implement Language Handling for Project Content",
            "description": "Add support for multilingual project content with language detection, fallbacks, and filtering.",
            "dependencies": [
              "3.4"
            ],
            "details": "Implement functionality to load the language field from frontmatter and support filtering collections by language. Create a system for language fallbacks when content isn't available in the requested language. Integrate with the site's language switching mechanism (if already implemented) to ensure project content changes appropriately when language is switched.",
            "status": "done",
            "testStrategy": "Test with projects in different languages. Verify language filtering works correctly. Test language switching to ensure content updates appropriately. Verify fallback behavior when content isn't available in the requested language."
          },
          {
            "id": 8,
            "title": "Develop Date Formatting and Handling System",
            "description": "Create utilities for parsing ISO dates, formatting them according to language preferences, and handling ongoing projects.",
            "dependencies": [
              "3.3"
            ],
            "details": "Implement utilities to parse ISO date strings from frontmatter. Create formatting functions that display dates according to language preferences (e.g., 'January 2022' vs 'Enero 2022'). Add special handling for ongoing projects (missing endDate) to display appropriate text (e.g., 'Present' or 'Actual'). Include relative time formatting options (e.g., '2 years ago').",
            "status": "done",
            "testStrategy": "Test date parsing with various formats. Verify formatting in different languages. Test handling of ongoing projects and edge cases like projects with same start/end dates."
          },
          {
            "id": 9,
            "title": "Implement Image Validation and Processing",
            "description": "Add validation for hero images, generate alt text, and support responsive image attributes.",
            "dependencies": [
              "3.3"
            ],
            "details": "Implement validation to ensure heroImage paths reference existing files. Generate default alt text from project titles if not explicitly provided. Add support for responsive image attributes (srcset, sizes) to optimize loading. Include image optimization as part of the build process to reduce file sizes while maintaining quality.",
            "status": "done",
            "testStrategy": "Test with valid and invalid image paths. Verify alt text generation. Test responsive image attributes on different devices. Measure image loading performance before and after optimization."
          },
          {
            "id": 10,
            "title": "Integrate with Build Process for Static HTML Generation",
            "description": "Set up the build process to generate a static HTML page for each Markdown file using the project template.",
            "dependencies": [
              "3.6",
              "3.7",
              "3.8",
              "3.9"
            ],
            "details": "Integrate the Markdown processing system with the static site generator's build process. For each processed Markdown file, generate a static HTML page using the project template. Create predictable permalinks/URLs based on slugs or file paths. Ensure all metadata and content are correctly passed to the template. Add build-time validation to catch any issues with content or frontmatter.",
            "status": "done",
            "testStrategy": "Run the build process with various Markdown files. Verify each generates a correctly formatted HTML page with proper URLs. Test the build process with invalid content to ensure appropriate error handling."
          },
          {
            "id": 11,
            "title": "Create Comprehensive Test Suite with Fixtures",
            "description": "Develop a test suite with fixtures for various frontmatter configurations, invalid inputs, and snapshot tests of rendered HTML.",
            "dependencies": [
              "3.10"
            ],
            "details": "Create a comprehensive test suite with fixtures representing different frontmatter variants (all required fields, optional fields, edge cases). Include tests for invalid inputs (missing required fields, wrong data types). Implement snapshot tests of rendered HTML to detect unintended changes in output. Add tests for the entire build pipeline from Markdown file to generated HTML.",
            "status": "done",
            "testStrategy": "Run the test suite automatically as part of CI/CD. Compare snapshot tests against previous versions to detect regressions. Ensure test coverage for all edge cases and error conditions."
          },
          {
            "id": 12,
            "title": "Write Documentation and Authoring Guide",
            "description": "Create documentation for the Markdown processing system and an authoring guide for content creators.",
            "dependencies": [
              "3.11"
            ],
            "details": "Write technical documentation for the Markdown processing system, including architecture overview, API references, and integration points. Create an authoring guide for content creators that explains required fields, naming conventions, Markdown features supported, and how to preview content. Include examples of valid frontmatter and common Markdown patterns used in projects. Document the build and deployment process for content updates.",
            "status": "done",
            "testStrategy": "Review documentation with potential users to ensure clarity. Verify examples are accurate and up-to-date. Test the authoring workflow by following the guide to create new content."
          }
        ]
      },
      {
        "id": 4,
        "title": "Design and Implement Homepage Hero Section",
        "description": "Create the hero section for the homepage that highlights Sofia's specialization in Python and AWS, with a professional profile image.",
        "details": "1. Design a visually appealing hero section with:\n   - Professional headline emphasizing Python and AWS expertise\n   - Professional profile image\n   - Brief introduction text\n   - Primary CTA button\n2. Implement responsive layout for the hero section\n3. Add subtle text animations as specified in the design considerations\n4. Optimize the profile image for web display\n5. Ensure the section is visually prominent and captures attention\n6. Implement proper heading hierarchy for SEO\n7. Create both English and Spanish versions of the content",
        "testStrategy": "Test the hero section across different screen sizes to ensure responsive behavior. Verify that text animations work correctly and don't affect usability. Check image loading performance and ensure proper alt text for accessibility. Test with both language settings to verify content switching works correctly.",
        "priority": "high",
        "dependencies": [
          2
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Scaffold Hero Section Markup",
            "description": "Create the basic HTML structure for the hero section in the homepage template using Nunjucks templating.",
            "dependencies": [],
            "details": "Add the hero section markup to src/pages/index.njk, extending from base.njk. Include the following elements: a container div with appropriate Tailwind classes, heading (h1) for the professional title, subheading paragraph for the brief introduction, a placeholder for the profile image, and a primary CTA button. Use semantic HTML elements and ensure proper nesting structure. Add data attributes for future animation targets.",
            "status": "done",
            "testStrategy": "Verify the markup renders correctly in the browser without styling. Check that the HTML structure is valid and follows semantic principles. Ensure the template extends properly from base.njk."
          },
          {
            "id": 2,
            "title": "Implement Responsive Hero Layout with Tailwind",
            "description": "Style the hero section using Tailwind CSS to create a responsive layout that works well on all device sizes.",
            "dependencies": [
              "4.1"
            ],
            "details": "Apply Tailwind classes to create a mobile-first responsive layout: stack elements vertically on mobile, switch to side-by-side layout on lg+ screens. Use flex or grid for layout. Apply appropriate spacing, padding, and max-width constraints. Implement a container with mx-auto for centering. Style the CTA button with appropriate colors, padding, and hover states. Ensure the hero section has sufficient visual prominence through background styling, padding, and possibly a subtle gradient or accent color.",
            "status": "done",
            "testStrategy": "Test the responsive behavior across multiple screen sizes (mobile, tablet, desktop). Verify layout shifts appropriately at breakpoints. Check that spacing and sizing are visually balanced. Ensure the CTA button is properly styled and has appropriate hover states."
          },
          {
            "id": 3,
            "title": "Add and Optimize Profile Image",
            "description": "Add the professional profile image to the hero section with proper optimization for web performance.",
            "dependencies": [
              "4.1"
            ],
            "details": "Place the profile image file in public/assets/images/profile.jpg. Optimize the image for web (compress, proper dimensions). Create multiple sizes for responsive images if needed. In the markup, add the image with proper alt text, explicit width/height attributes to prevent layout shift, and appropriate Tailwind classes for sizing and styling. Consider adding a subtle border or shadow effect. Do not add lazy-loading to this image since it's likely an LCP (Largest Contentful Paint) element.",
            "status": "done",
            "testStrategy": "Verify the image loads correctly and is properly sized across devices. Check that the image file size is optimized (<200KB recommended). Ensure proper alt text is present. Confirm no layout shift occurs during image load."
          },
          {
            "id": 4,
            "title": "Implement Text Animation with Accessibility Support",
            "description": "Add subtle text animations to the hero section while ensuring accessibility compliance.",
            "dependencies": [
              "4.1",
              "4.2"
            ],
            "details": "Implement subtle fade-in and/or slide-in animations for the heading, subheading, and CTA using CSS transitions or animations. Add a small stagger effect between elements. Ensure animations are short (300-500ms) and don't interfere with readability. Implement prefers-reduced-motion media query support to disable animations for users who prefer reduced motion. Use data attributes from the markup as animation hooks. Ensure no layout shifts occur during animations.",
            "status": "done",
            "testStrategy": "Test animations for smoothness and timing. Verify animations work correctly across browsers. Test with prefers-reduced-motion enabled to ensure animations are properly disabled. Check that animations don't cause performance issues or layout shifts."
          },
          {
            "id": 5,
            "title": "Implement Internationalization for Hero Content",
            "description": "Create both English and Spanish versions of the hero section content and implement language switching.",
            "dependencies": [
              "4.1"
            ],
            "details": "Create a JSON data file with English and Spanish translations for all hero section text content (heading, subheading, CTA button text). Use the existing normalizeLang utility and language filters to implement content switching. Update the hero section markup to use translation keys instead of hardcoded text. Ensure the language switch mechanism works correctly for the hero section. Verify that text length differences between languages don't break the layout.",
            "status": "done",
            "testStrategy": "Test language switching between English and Spanish. Verify all text elements correctly display the translated content. Check that longer Spanish text doesn't cause layout issues. Ensure the language state is preserved when navigating between pages."
          },
          {
            "id": 6,
            "title": "Optimize Hero Section for SEO and Accessibility",
            "description": "Ensure the hero section follows SEO best practices and meets WCAG AA accessibility standards.",
            "dependencies": [
              "4.1",
              "4.2",
              "4.3",
              "4.5"
            ],
            "details": "Verify proper heading hierarchy with h1 for the main headline. Add appropriate ARIA attributes where needed. Ensure sufficient color contrast (minimum 4.5:1 for normal text, 3:1 for large text) according to WCAG AA standards. Check that all interactive elements are keyboard accessible with visible focus states. Add structured data (JSON-LD) for the person information if appropriate. Ensure the CTA button has descriptive text and proper focus styling.",
            "status": "done",
            "testStrategy": "Use accessibility tools (like axe or Lighthouse) to verify WCAG AA compliance. Check keyboard navigation through the hero section. Verify color contrast meets requirements. Test with screen readers to ensure content is properly announced."
          },
          {
            "id": 7,
            "title": "Create Build Verification and Documentation",
            "description": "Implement verification checks for the hero section and update documentation.",
            "dependencies": [
              "4.1",
              "4.2",
              "4.3",
              "4.4",
              "4.5",
              "4.6"
            ],
            "details": "Create a simple smoke test that verifies the hero section renders correctly in the built output (_site directory). Add comments in the code explaining the structure and animation approach. Update any project documentation to include information about the hero section implementation. Document the translation keys used for i18n. Create a simple checklist for content updates to the hero section. Verify that the Eleventy build process completes successfully with the new hero section.",
            "status": "done",
            "testStrategy": "Run the Eleventy build and verify the hero section appears correctly in the output HTML. Check that all assets are properly referenced and load correctly. Verify documentation is clear and helpful for future developers or content editors."
          }
        ]
      },
      {
        "id": 5,
        "title": "Implement Featured Work Section",
        "description": "Create the 'Featured Work' section on the homepage that displays the most important projects in a card-based layout.",
        "details": "1. Design project cards that include:\n   - Project thumbnail image\n   - Project title\n   - Brief description\n   - Technologies used (tags)\n   - Visual hover effect (FR9)\n2. Implement a responsive grid layout that shows:\n   - 3 columns on desktop\n   - 2 columns on tablet\n   - 1 column on mobile\n3. Create a system to mark certain projects as 'featured' in the frontmatter\n4. Implement lazy loading for project images (FR19)\n5. Add smooth transitions for hover effects\n6. Ensure proper linking to individual project pages",
        "testStrategy": "Test the grid layout at various screen sizes to verify the correct number of columns. Verify that hover effects work properly and are accessible. Test image lazy loading by simulating slow network conditions. Check that all links to project pages work correctly. Verify the section renders correctly with different numbers of featured projects.",
        "priority": "medium",
        "dependencies": [
          3,
          4,
          "1"
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Create Eleventy Collection for Featured Projects",
            "description": "Set up an Eleventy collection that filters projects with 'featured: true' in their frontmatter to be displayed in the Featured Work section.",
            "dependencies": [],
            "details": "Create a custom Eleventy collection named 'featured_projects' in the .eleventy.js file that filters projects where data.featured === true. Include language filtering based on the current page locale. Sort the collection by date (newest first) or by a custom 'order' field if present in the frontmatter. Limit to a maximum of 6 featured projects.",
            "status": "done",
            "testStrategy": "Verify the collection returns only projects with featured: true. Test with multiple languages to ensure proper filtering. Check sorting order is correct."
          },
          {
            "id": 2,
            "title": "Design Project Card Component",
            "description": "Create a reusable project card component that displays project information in an attractive and accessible format.",
            "dependencies": [
              "5.1"
            ],
            "details": "Create a partial/include for project cards with the following elements: hero image (with width/height attributes, loading='lazy', decoding='async'), project title as a link to the project page, short description/excerpt (limited to ~120 characters), up to 5 technology tags displayed as chips, and proper alt text from 'alt' or 'title' field. Add hover effects with smooth transitions that slightly elevate the card and change background color. Ensure the entire card is clickable but maintains proper accessibility.",
            "status": "done",
            "testStrategy": "Test keyboard navigation and focus states. Verify hover effects work across browsers. Check that truncation of long descriptions works properly. Ensure image aspect ratios are maintained."
          },
          {
            "id": 3,
            "title": "Implement Responsive Grid Layout",
            "description": "Create a responsive grid layout for the Featured Work section that adapts to different screen sizes.",
            "dependencies": [
              "5.2"
            ],
            "details": "Using Tailwind CSS, implement a responsive grid container that displays: 1 column on mobile (xs), 2 columns on tablet (md), and 3 columns on desktop (lg). Add appropriate gap spacing between cards. Ensure the grid maintains proper alignment and spacing at all breakpoints. Use CSS Grid or Flexbox through Tailwind utilities. Add proper container padding that adjusts at different breakpoints.",
            "status": "done",
            "testStrategy": "Test at various viewport sizes to verify correct number of columns. Check that spacing and alignment remain consistent across breakpoints. Verify no horizontal overflow occurs on mobile devices."
          },
          {
            "id": 4,
            "title": "Create Featured Work Section Structure",
            "description": "Build the overall structure for the Featured Work section including heading, introduction, and navigation elements.",
            "dependencies": [
              "5.3"
            ],
            "details": "Create the section with an id='projects' for direct linking. Add a visually prominent heading ('Featured Work' or equivalent in the current language). Include an optional short introductory paragraph. Add a 'View all projects' link at the bottom of the section that points to a projects listing page. Ensure proper semantic HTML structure with appropriate heading levels. Add section padding and background styling consistent with the site design.",
            "status": "done",
            "testStrategy": "Verify the anchor ID works for direct navigation. Check that heading hierarchy is correct. Test the 'View all projects' link functionality. Ensure responsive behavior of the section container."
          },
          {
            "id": 5,
            "title": "Implement Image Optimization and Lazy Loading",
            "description": "Set up image optimization and lazy loading for project thumbnails to improve performance.",
            "dependencies": [
              "5.2"
            ],
            "details": "Implement responsive images with srcset and sizes attributes for project thumbnails. Set up a build process to generate optimized image versions at different widths (e.g., 300w, 600w, 900w). Add loading='lazy' attribute to all images. Implement a lightweight placeholder or blur-up technique for images. Add decoding='async' attribute. Ensure images have explicit width and height attributes to prevent layout shifts.",
            "status": "done",
            "testStrategy": "Test image loading performance with throttled network conditions. Verify lazy loading works correctly for below-the-fold images. Check that no layout shifts occur as images load. Validate image optimization with Lighthouse."
          },
          {
            "id": 6,
            "title": "Enhance Accessibility of Featured Work Section",
            "description": "Ensure the Featured Work section meets accessibility standards and provides a good experience for all users.",
            "dependencies": [
              "5.4"
            ],
            "details": "Add appropriate ARIA attributes where needed (e.g., aria-label for links that need additional context). Ensure sufficient color contrast for all text elements including technology tags. Implement visible focus states for interactive elements. Make cards fully keyboard navigable. Add screen reader-friendly descriptions where needed. Ensure hover effects don't rely solely on color changes. Test with keyboard navigation to ensure all elements are accessible.",
            "status": "done",
            "testStrategy": "Test with keyboard navigation to verify all interactive elements are accessible. Use accessibility tools (like axe or Lighthouse) to check for issues. Verify color contrast meets WCAG AA standards. Test with a screen reader to ensure proper information hierarchy."
          },
          {
            "id": 7,
            "title": "Add Documentation and Testing for Featured Projects",
            "description": "Create documentation for content authors and implement tests to verify the Featured Work section functions correctly.",
            "dependencies": [
              "5.1",
              "5.4",
              "5.5",
              "5.6"
            ],
            "details": "Add documentation in the project README explaining how to mark projects as featured using 'featured: true' in frontmatter. Document image requirements for optimal display in project cards. Create build-time tests that verify the section renders and contains at least one featured card. Add tests to verify external links have proper attributes (target, rel). Create snapshot tests for the section's HTML structure. Document the expected behavior of the responsive layout.",
            "status": "done",
            "testStrategy": "Run automated tests during the build process to verify section rendering. Check that documentation is clear and comprehensive. Verify that example frontmatter is provided for content authors. Test that build fails appropriately if critical elements are missing."
          }
        ]
      },
      {
        "id": 6,
        "title": "Implement Certifications Section",
        "description": "Create the 'Certifications' section on the homepage that displays AWS certification badges.",
        "details": "1. Design a visually appealing certifications section\n2. Obtain official AWS certification badge images\n3. Implement a responsive layout for displaying certification badges\n4. Add metadata for each certification including:\n   - Certification name\n   - Date obtained\n   - Verification link (if applicable)\n5. Optimize badge images for web display\n6. Implement hover effects for additional information\n7. Create both English and Spanish versions of certification descriptions",
        "testStrategy": "Verify that certification badges display correctly at different screen sizes. Test hover effects to ensure additional information is accessible. Check image loading performance. Verify that verification links work correctly if implemented. Test with both language settings to ensure proper content switching.",
        "priority": "medium",
        "dependencies": [
          2,
          4
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Create Certifications Data Model",
            "description": "Design and implement the data structure for storing certification information in a JSON file.",
            "dependencies": [],
            "details": "Create src/data/certifications.json with a schema that includes id, name, issuer, issueDate, credentialUrl, badgeImage, alt, and optional expiresDate fields. Include at least one real AWS certification example. Ensure the structure supports both English and Spanish localization by referencing keys in i18n.json for text content.",
            "status": "done",
            "testStrategy": "Validate JSON structure with a schema validator. Ensure required fields are present and formatted correctly."
          },
          {
            "id": 2,
            "title": "Add Certification Badge Assets",
            "description": "Obtain and optimize AWS certification badge images for web display.",
            "dependencies": [],
            "details": "Source official AWS certification badge images. Create public/assets/certs/ directory. Optimize badges as SVG (preferred) or PNG with appropriate dimensions. Ensure each image has explicit width and height attributes. Name files consistently (e.g., aws-solutions-architect.svg).",
            "status": "done",
            "testStrategy": "Verify image optimization with tools like ImageOptim. Check file sizes are under 30KB each. Confirm width and height attributes are set."
          },
          {
            "id": 3,
            "title": "Implement Certifications Section HTML Structure",
            "description": "Create the base HTML structure for the certifications section on the homepage.",
            "dependencies": [
              "6.1",
              "6.2"
            ],
            "details": "Add a section with id=\"certifications\" to the homepage template. Include a localized H2 heading. Create a responsive grid container for certification cards. Implement the card template in Nunjucks that displays the badge image, certification name, issuer, issue date, and credential verification link.",
            "status": "done",
            "testStrategy": "Validate HTML structure. Ensure proper semantic markup and heading hierarchy."
          },
          {
            "id": 4,
            "title": "Style Certifications Section with Tailwind",
            "description": "Apply Tailwind CSS styling to the certifications section for responsive layout and visual appeal.",
            "dependencies": [
              "6.3"
            ],
            "details": "Implement a responsive grid layout (2 columns on small screens, 3 on medium, 4 on large). Add appropriate padding, margins, and gaps. Style certification cards with consistent spacing. Create hover/focus effects that are reduced-motion friendly. Ensure keyboard focus is visibly indicated.",
            "status": "done",
            "testStrategy": "Test responsive behavior across different viewport sizes. Verify hover/focus states work correctly. Check for any layout issues or overflow."
          },
          {
            "id": 5,
            "title": "Implement i18n for Certification Content",
            "description": "Add localization support for all certification text content.",
            "dependencies": [
              "6.1",
              "6.3"
            ],
            "details": "Update src/data/i18n.json with keys for certifications.heading, certifications.issuer, certifications.viewCredential, certifications.issuedOn, etc. Provide both English and Spanish translations. Connect these keys to the Nunjucks templates. Format dates according to locale preferences.",
            "status": "done",
            "testStrategy": "Switch between languages to verify all text content changes appropriately. Check date formatting is locale-appropriate."
          },
          {
            "id": 6,
            "title": "Add JSON-LD Structured Data",
            "description": "Implement structured data for certifications to improve SEO.",
            "dependencies": [
              "6.1",
              "6.3"
            ],
            "details": "Create a script[type=\"application/ld+json\"] element in the certifications section or page head. Generate JSON-LD for each certification using the EducationalOccupationalCredential schema. Include name, issuer (as Organization), datePublished, and url properties. Dynamically generate this from the certifications data.",
            "status": "done",
            "testStrategy": "Validate JSON-LD using Google's Structured Data Testing Tool or Schema.org Validator. Ensure all required properties are present and correctly formatted."
          },
          {
            "id": 7,
            "title": "Implement Accessibility Enhancements",
            "description": "Ensure the certifications section meets accessibility standards.",
            "dependencies": [
              "6.3",
              "6.4"
            ],
            "details": "Add appropriate aria-labels to links where text is not fully descriptive (e.g., aria-label=\"View credential: {name}\"). Ensure all images have descriptive alt text. Verify proper keyboard navigation through the certification cards. Add appropriate external link indicators with target=\"_blank\" rel=\"noopener noreferrer\" for credential URLs.",
            "status": "done",
            "testStrategy": "Test keyboard navigation. Run accessibility checks with tools like axe or Lighthouse. Verify screen reader compatibility."
          },
          {
            "id": 8,
            "title": "Add Documentation and Tests",
            "description": "Create documentation for the certifications feature and implement tests.",
            "dependencies": [
              "6.1",
              "6.2",
              "6.3",
              "6.4",
              "6.5",
              "6.6",
              "6.7"
            ],
            "details": "Update README.md or create a specific doc explaining how to add new certifications, required fields, asset placement, and i18n considerations. Extend or create build-time tests in scripts/test-build.js to verify: section#certifications exists, at least one card renders, external links include rel attributes, images have width/height attributes, and JSON-LD is present.",
            "status": "done",
            "testStrategy": "Run the build-time tests to ensure all components render correctly. Manually verify documentation accuracy by adding a test certification following the instructions."
          }
        ]
      },
      {
        "id": 7,
        "title": "Develop Individual Project Page Template",
        "description": "Create the template for individual project pages that will display the full content of each project with proper formatting.",
        "details": "1. Design a project page template with:\n   - Hero banner with project image (FR13)\n   - Project metadata section (title, dates, employer, etc.)\n   - Main content area with proper typography\n   - 'Technologies Used' section generated from tags (FR15)\n   - Navigation to other projects\n2. Implement the Tailwind 'prose' class for content formatting\n3. Create a responsive layout that prioritizes readability\n4. Add proper semantic HTML structure for SEO\n5. Implement metadata extraction from frontmatter\n6. Set up language-specific content display based on the language setting",
        "testStrategy": "Test the project page with various types of Markdown content to ensure proper rendering. Verify that all metadata from frontmatter is correctly displayed. Test responsiveness across different screen sizes. Check that the 'Technologies Used' section correctly displays all tags. Test with both English and Spanish content to verify language switching works correctly.",
        "priority": "high",
        "dependencies": [
          3
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Create Basic Project Template Structure with Semantic HTML",
            "description": "Set up the initial Nunjucks template file with proper semantic HTML structure for the project page layout.",
            "dependencies": [],
            "details": "Create src/layouts/project.njk with semantic HTML structure including <header>, <article>, and <section> tags. Implement the basic page structure with proper heading hierarchy. Include placeholders for all required sections: hero banner, metadata section, main content area, technologies section, and project navigation.",
            "status": "done",
            "testStrategy": "Verify the template compiles without errors using 'npm run build'. Check HTML validity and semantic structure using the W3C validator."
          },
          {
            "id": 2,
            "title": "Implement Hero Banner with Project Image",
            "description": "Create the hero banner section that displays the project's featured image with proper performance attributes and fallback handling.",
            "dependencies": [
              "7.1"
            ],
            "details": "In the hero banner section, implement an image element that sources from project.heroImage. Add performance attributes (loading=\"lazy\", decoding=\"async\"). Implement proper alt text fallback using alt || title. Style the hero banner with appropriate sizing and responsive behavior using Tailwind classes.",
            "status": "done",
            "testStrategy": "Test with projects that have and don't have hero images to verify fallback behavior. Verify image performance attributes are correctly applied in the output HTML."
          },
          {
            "id": 3,
            "title": "Develop Project Metadata Section",
            "description": "Create the metadata section displaying project title, date range, employer, and other relevant information from frontmatter.",
            "dependencies": [
              "7.1"
            ],
            "details": "Extract and display project metadata from frontmatter including title, employer, and date range. Use the dateRange(startDate, endDate, language) filter for formatting dates according to the current language. Style the metadata section with appropriate typography and spacing using Tailwind classes.",
            "status": "done",
            "testStrategy": "Test with projects having different metadata combinations. Verify date formatting works correctly in both languages. Check that all metadata fields are properly extracted and displayed."
          },
          {
            "id": 4,
            "title": "Implement Main Content Area with Tailwind Prose",
            "description": "Set up the main content area that renders the Markdown content with proper typography and formatting.",
            "dependencies": [
              "7.1"
            ],
            "details": "Implement the main content area using {{ content | safe }} to render the Markdown content. Apply Tailwind's prose classes for proper typography and content formatting. Ensure the content area is responsive and maintains readability across different screen sizes.",
            "status": "done",
            "testStrategy": "Test with various Markdown content types (headings, lists, code blocks, images) to ensure proper rendering. Verify responsive behavior on different screen sizes."
          },
          {
            "id": 5,
            "title": "Create Technologies Used Section from Tags",
            "description": "Implement the section that displays the technologies used in the project based on frontmatter tags.",
            "dependencies": [
              "7.1"
            ],
            "details": "Create a 'Technologies Used' section that iterates through project tags and displays them. Filter out the 'project' tag which is used for collection purposes. Style the tags consistently with the design system. Implement proper heading and semantic structure for this section.",
            "status": "done",
            "testStrategy": "Test with projects having different numbers of tags. Verify the 'project' tag is correctly excluded. Check the responsive layout of tags on different screen sizes."
          },
          {
            "id": 6,
            "title": "Implement Project Navigation",
            "description": "Create navigation links to previous and next projects with proper accessibility and internationalization.",
            "dependencies": [
              "7.1"
            ],
            "details": "Implement previous/next project navigation at the bottom of the template. Use the collections.projects.byLanguage filter to ensure navigation only includes projects in the current language. Add proper accessible labels using the t(language) filter for internationalization. Style the navigation with appropriate visual cues and spacing.",
            "status": "done",
            "testStrategy": "Test navigation between projects to ensure correct sequencing. Verify language filtering works correctly. Check accessibility of navigation elements with screen readers."
          },
          {
            "id": 7,
            "title": "Implement Language-Specific Content Display",
            "description": "Ensure all content and UI elements adapt to the selected language setting.",
            "dependencies": [
              "7.3",
              "7.5",
              "7.6"
            ],
            "details": "Implement language-specific display for all text elements using the t(language) filter. Ensure date formatting respects the current language setting. Test and verify that navigation only shows projects in the current language using the byLanguage filter.",
            "status": "done",
            "testStrategy": "Test the template with both English and Spanish content to verify correct language display. Check that date formats follow language conventions. Verify navigation only shows projects in the current language."
          },
          {
            "id": 8,
            "title": "Add Tests and Update Test Scripts",
            "description": "Update existing test scripts to verify the project template implementation and create new tests as needed.",
            "dependencies": [
              "7.2",
              "7.3",
              "7.4",
              "7.5",
              "7.6",
              "7.7"
            ],
            "details": "Update scripts/test-build.js to include tests for the project template. Add snapshot expectations for project pages. Create tests to verify all required sections are present and correctly formatted. Document which tests are satisfied by the current implementation and what needs additional verification.",
            "status": "done",
            "testStrategy": "Run the updated test scripts to verify all aspects of the project template. Check that snapshots match expected output. Manually verify visual aspects that automated tests cannot cover."
          }
        ]
      },
      {
        "id": 8,
        "title": "Implement SEO Optimization",
        "description": "Implement SEO features to optimize the site for search engines, particularly for terms related to 'Python AWS developer'.",
        "details": "1. Create a system to automatically generate meta tags for each page (FR20):\n   - Title tags\n   - Meta descriptions\n   - Open Graph tags for social sharing\n   - Twitter card tags\n2. Implement canonical URLs\n3. Create a sitemap.xml generator\n4. Implement structured data (JSON-LD) for:\n   - Person information\n   - Professional experience\n   - Skills\n5. Optimize heading hierarchy across the site\n6. Implement alt text for all images\n7. Create a robots.txt file\n8. Ensure proper semantic HTML throughout the site",
        "testStrategy": "Use tools like Google's Structured Data Testing Tool to verify JSON-LD implementation. Test meta tags generation for various page types. Validate the sitemap.xml format. Use Lighthouse to test SEO score (target >90 as per SM6). Verify that all images have appropriate alt text. Check that canonical URLs are correctly implemented.",
        "priority": "medium",
        "dependencies": [
          2,
          3,
          7
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 9,
        "title": "Implement Performance Optimizations",
        "description": "Implement performance optimizations to ensure fast loading times and a high Lighthouse performance score.",
        "details": "1. Implement image optimization pipeline:\n   - Resize images to appropriate dimensions\n   - Convert to modern formats (WebP with fallbacks)\n   - Implement lazy loading for all images (FR19)\n2. Set up CSS optimization:\n   - Purge unused Tailwind CSS classes\n   - Minify CSS output\n3. Implement JavaScript optimization:\n   - Minify and bundle JS files\n   - Use defer for non-critical scripts\n4. Implement font optimization:\n   - Use font-display: swap\n   - Preload critical fonts\n5. Add appropriate caching headers\n6. Implement critical CSS extraction\n7. Set up code splitting where appropriate",
        "testStrategy": "Use Lighthouse to measure performance score (target >90 as per SM5). Test site loading on slow network connections. Verify that lazy loading works correctly for images. Measure Time to First Byte (TTFB) and First Contentful Paint (FCP). Check total page weight and number of requests. Test on both desktop and mobile devices.",
        "priority": "medium",
        "dependencies": [
          2,
          3,
          4,
          5,
          6,
          7
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 10,
        "title": "Implement Language Switching Functionality",
        "description": "Implement a complete language switching system that allows users to toggle between English and Spanish content throughout the site.",
        "details": "1. Design a language switcher UI component\n2. Implement a language state management system\n3. Create a translation system that supports:\n   - UI elements (navigation, buttons, etc.)\n   - Static content on the homepage\n   - Dynamic content from Markdown files\n4. Store language preference in localStorage\n5. Update URL with language parameter\n6. Implement proper lang attribute on HTML elements\n7. Ensure all date formats adapt to the selected language\n8. Add language metadata to the page head",
        "testStrategy": "Test language switching on all pages to verify content changes correctly. Verify that language preference is saved between sessions. Test URL-based language switching. Check that dates and other formatted content adapt to the selected language. Verify that the lang attribute is correctly updated in the HTML. Test with screen readers to ensure accessibility.",
        "priority": "medium",
        "dependencies": [
          2,
          3,
          7
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Create language state management module",
            "description": "Implement a core language state management module that handles language selection, persistence, and retrieval.",
            "dependencies": [],
            "details": "Create a languageManager.js module with functions to: 1) Get current language (defaulting to browser language or 'en'), 2) Set language preference, 3) Save language to localStorage, 4) Read language from localStorage, 5) Parse language from URL parameters. Include a default language configuration object with supported languages (en, es). Implement proper error handling and input validation for URL parameters.",
            "status": "done",
            "testStrategy": "Unit test each function in isolation. Test localStorage persistence across page reloads. Test URL parameter parsing with valid and invalid inputs. Test browser language detection fallback."
          },
          {
            "id": 2,
            "title": "Design and implement language switcher UI component",
            "description": "Create an accessible language switcher UI component for the site header that allows users to toggle between English and Spanish.",
            "dependencies": [
              "10.1"
            ],
            "details": "Create a language-switcher.js component that renders a toggle button with language options. Style according to site design system. Implement with proper ARIA attributes (aria-label, aria-expanded, etc.). Add keyboard navigation support. Ensure the component displays the current active language. Add event listeners to trigger language change using the language state manager. Prevent page flicker on language change.",
            "status": "done",
            "testStrategy": "Test keyboard accessibility (tab navigation, Enter/Space activation). Test ARIA attributes are correctly set. Test visual states (hover, focus, active). Test that language change events are properly triggered."
          },
          {
            "id": 3,
            "title": "Implement translation system for UI elements",
            "description": "Create a translation system for UI elements like navigation, buttons, and other static interface components.",
            "dependencies": [
              "10.1"
            ],
            "details": "Create a translations.js file with a structured object containing UI string translations for both languages. Implement a translate() function that accepts a key and returns the appropriate string based on current language. Add a mechanism to update all UI elements when language changes. Create data attributes (e.g., data-i18n-key) for HTML elements that need translation. Implement observer pattern to notify UI when language changes.",
            "status": "done",
            "testStrategy": "Test translation retrieval for all UI strings in both languages. Test fallback behavior for missing translations. Test dynamic UI updates when language changes. Verify all navigation items and buttons display correctly in both languages."
          },
          {
            "id": 4,
            "title": "Implement static content translation for homepage",
            "description": "Create a system to translate static content on the homepage between English and Spanish.",
            "dependencies": [
              "10.1",
              "10.3"
            ],
            "details": "Extend the translation system to handle longer content blocks. Create content JSON files for homepage sections in both languages. Implement a content loader that fetches the appropriate language content. Add a mechanism to swap content when language changes without page reload. Ensure content maintains proper formatting and layout when switched.",
            "status": "done",
            "testStrategy": "Test content loading for both languages. Verify all homepage sections display correctly after language switch. Test edge cases like partial translations. Check that formatting and layout remain consistent across languages."
          },
          {
            "id": 5,
            "title": "Implement Markdown content language handling",
            "description": "Create a system to handle multilingual content in Markdown files with appropriate fallback mechanisms.",
            "dependencies": [
              "10.1"
            ],
            "details": "Modify the Markdown processing pipeline to support language-specific content. Update frontmatter schema to include language identifier. Implement a content selection algorithm that: 1) Tries to load content in the requested language, 2) Falls back to default language if translation unavailable, 3) Indicates to the user when content is displayed in fallback language. Create a directory structure that supports multilingual content organization.",
            "status": "done",
            "testStrategy": "Test content loading with both languages available. Test fallback behavior when translation is missing. Verify frontmatter parsing works correctly with language metadata. Test edge cases like partial translations or malformed language identifiers."
          },
          {
            "id": 6,
            "title": "Implement URL-based language switching",
            "description": "Add support for language selection via URL parameters and update URLs when language is changed.",
            "dependencies": [
              "10.1",
              "10.2"
            ],
            "details": "Extend languageManager.js to parse the 'lang' URL parameter. Implement URL updating when language changes (using History API). Add language parameter to all internal links. Ensure bookmarking works with language preference. Sanitize URL parameters to prevent XSS. Handle edge cases like invalid language codes in URL. Maintain other URL parameters when updating language.",
            "status": "done",
            "testStrategy": "Test URL parameter parsing with various inputs. Test URL updates when language changes. Verify bookmarked URLs load with correct language. Test security aspects with malformed inputs. Test that other URL parameters are preserved during language change."
          },
          {
            "id": 7,
            "title": "Implement HTML language attributes and metadata",
            "description": "Update HTML lang attribute and add appropriate language metadata to the page head for SEO and accessibility.",
            "dependencies": [
              "10.1"
            ],
            "details": "Create a function to update the HTML lang attribute when language changes. Implement hreflang link tags in the head for language alternatives. Add language-specific metadata for SEO. Update document title with localized version when language changes. Ensure all language codes follow ISO standards. Implement proper RTL support if needed in the future.",
            "status": "done",
            "testStrategy": "Verify HTML lang attribute updates correctly. Test hreflang tags are properly generated. Check that metadata is correctly updated for SEO. Test with screen readers to verify accessibility improvements."
          },
          {
            "id": 8,
            "title": "Implement localized date and number formatting",
            "description": "Create a system to format dates, numbers, and other locale-specific content according to the selected language.",
            "dependencies": [
              "10.1"
            ],
            "details": "Create a formatting.js utility with functions for date and number formatting based on current language. Use Intl API for localization. Implement functions for common formats (short date, long date, currency, etc.). Add data attributes to mark elements needing localized formatting. Update formatted elements when language changes. Handle timezone considerations.",
            "status": "done",
            "testStrategy": "Test date formatting in both languages. Verify number formatting follows locale conventions. Test currency formatting if applicable. Test dynamic updates of formatted content when language changes."
          },
          {
            "id": 9,
            "title": "Implement language preference persistence",
            "description": "Ensure language preference is saved between sessions and properly restored on site revisit.",
            "dependencies": [
              "10.1",
              "10.6"
            ],
            "details": "Enhance languageManager.js to robustly save language preference to localStorage. Implement proper initialization sequence: 1) Check URL parameters first, 2) Fall back to localStorage if no URL parameter, 3) Use browser language detection as final fallback, 4) Default to English if all else fails. Add expiration to stored preferences if needed. Handle localStorage unavailability gracefully.",
            "status": "done",
            "testStrategy": "Test persistence across page reloads and browser restarts. Test the full initialization sequence with different scenarios. Test behavior when localStorage is unavailable or disabled. Verify priority order of different language sources (URL > localStorage > browser language > default)."
          },
          {
            "id": 10,
            "title": "Create comprehensive tests for language system",
            "description": "Implement end-to-end and integration tests for the complete language switching functionality.",
            "dependencies": [
              "10.1",
              "10.2",
              "10.3",
              "10.4",
              "10.5",
              "10.6",
              "10.7",
              "10.8",
              "10.9"
            ],
            "details": "Create automated tests that verify the complete language switching flow. Test integration between all components. Implement visual regression tests to ensure layout doesn't break with different language content lengths. Create test cases for all edge cases and error scenarios. Test performance impact of language switching. Verify accessibility compliance in both languages. Document test coverage and results.",
            "status": "done",
            "testStrategy": "Run end-to-end tests simulating real user language switching. Test all pages in both languages. Verify visual consistency across languages. Test with screen readers and keyboard navigation. Measure and document performance metrics for language switching operations."
          }
        ]
      },
      {
        "id": 11,
        "title": "Implement Animation and Interactive Elements",
        "description": "Implement subtle animations and interactive elements to enhance the user experience and create a premium feel.",
        "details": "1. Implement subtle text animations as specified in the design considerations\n2. Create hover effects for project cards (FR9)\n3. Add transition animations for page navigation\n4. Implement scroll-triggered animations for content sections\n5. Create interactive elements for the Technologies Used tags\n6. Implement smooth scrolling\n7. Add focus states for accessibility\n8. Ensure all animations respect user preferences (prefers-reduced-motion)",
        "testStrategy": "Test all animations for smoothness and performance impact. Verify that animations don't trigger layout shifts. Test with prefers-reduced-motion enabled to ensure animations are disabled appropriately. Check accessibility of all interactive elements with keyboard navigation. Test on lower-end devices to ensure performance isn't compromised.",
        "priority": "low",
        "dependencies": [
          4,
          5,
          6,
          7
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 12,
        "title": "Implement AWS CloudWatch RUM Integration",
        "description": "Integrate AWS CloudWatch Real User Monitoring (RUM) to track performance metrics and user behavior.",
        "details": "1. Set up an AWS CloudWatch RUM app monitor\n2. Configure the RUM web client:\n   - Install the required JavaScript\n   - Configure session sampling\n   - Set up custom events for important user interactions\n3. Implement tracking for key metrics:\n   - Page load times\n   - CTA button clicks\n   - Time spent on project pages\n   - Language switching\n4. Set up custom dashboards in CloudWatch\n5. Configure alerts for performance degradation\n6. Implement privacy-conscious data collection\n7. Add a privacy notice regarding analytics",
        "testStrategy": "Verify that the RUM client is correctly sending data to CloudWatch. Test custom event tracking by performing the tracked actions. Check that dashboards display the expected metrics. Verify that no personally identifiable information is being collected without consent. Test with various browsers to ensure compatibility.",
        "priority": "low",
        "dependencies": [
          9
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 13,
        "title": "Create Sample Project Content",
        "description": "Create sample project Markdown files to demonstrate the content structure and test the rendering system.",
        "details": "1. Create at least 3 sample project Markdown files with:\n   - Complete frontmatter (title, description, dates, etc.)\n   - Rich content including headings, lists, code blocks, images\n   - Technologies tags\n   - Both English and Spanish versions\n2. Include realistic project descriptions based on Python and AWS expertise\n3. Add appropriate images for each project\n4. Implement proper formatting for technical content\n5. Include examples of different content types (case studies, technical projects, etc.)\n6. Ensure content demonstrates all supported Markdown features",
        "testStrategy": "Verify that all sample projects render correctly on both individual pages and in the Featured Work section. Check that frontmatter data is correctly extracted and displayed. Test language switching to ensure both versions are available. Verify that images are displayed correctly and responsively. Check that code blocks and technical content are properly formatted.",
        "priority": "medium",
        "dependencies": [
          3,
          7
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 14,
        "title": "Configure AWS Amplify Hosting",
        "description": "Set up AWS Amplify (or S3 + CloudFront) for hosting the static site under the domain sofia.escobedo.mx.",
        "details": "1. Create an AWS Amplify app connected to the GitHub repository\n2. Configure build settings:\n   - Specify build commands\n   - Set up environment variables if needed\n   - Configure output directory\n3. Set up continuous deployment from the main branch\n4. Configure custom domain (sofia.escobedo.mx):\n   - Verify domain ownership\n   - Set up SSL certificate\n   - Configure DNS settings\n5. Set up branch previews for development\n6. Configure caching and CDN settings\n7. Implement redirect rules if needed",
        "testStrategy": "Verify that the build process completes successfully in the Amplify console. Test the deployed site on the custom domain. Check that SSL is properly configured. Test the continuous deployment by pushing changes to the repository. Verify that caching is working correctly. Test site performance from different geographic locations.",
        "priority": "medium",
        "dependencies": [
          1,
          9
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 15,
        "title": "Final Testing and Launch",
        "description": "Conduct comprehensive testing across devices and browsers, fix any issues, and prepare for the official launch.",
        "details": "1. Perform cross-browser testing on:\n   - Chrome, Firefox, Safari, Edge\n   - Mobile browsers (iOS Safari, Android Chrome)\n2. Test responsive behavior across device sizes\n3. Conduct accessibility testing (WCAG compliance)\n4. Run performance tests using Lighthouse\n5. Verify all links and navigation\n6. Test language switching thoroughly\n7. Check all animations and interactive elements\n8. Verify analytics implementation\n9. Create a launch checklist\n10. Prepare social media announcements if applicable",
        "testStrategy": "Use browser testing tools (BrowserStack or similar) to verify compatibility across platforms. Run Lighthouse audits for performance, accessibility, best practices, and SEO (targets >90 for both performance and SEO as per SM5 and SM6). Test with screen readers and keyboard navigation. Verify that all success metrics defined in the PRD can be tracked. Create a detailed report of any issues found and their resolutions.",
        "priority": "high",
        "dependencies": [
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9,
          10,
          11,
          12,
          13,
          14
        ],
        "status": "pending",
        "subtasks": []
      }
    ],
    "metadata": {
      "created": "2025-09-12T17:38:29.434Z",
      "updated": "2025-09-13T03:54:06.985Z",
      "description": "Tasks for default context"
    }
  },
  "typescript-implement": {
    "tasks": [
      {
        "id": 1,
        "title": "Set up TypeScript and Initial Configuration",
        "description": "Install TypeScript and related dependencies, create tsconfig.json with appropriate compiler options, and set up the initial build process integration.",
        "details": "1. Install required dependencies:\n```bash\nnpm install --save-dev typescript @types/node ts-node\n```\n2. Create a tsconfig.json file with the following configuration:\n```json\n{\n  \"compilerOptions\": {\n    \"target\": \"ES2020\",\n    \"module\": \"ESNext\",\n    \"moduleResolution\": \"node\",\n    \"esModuleInterop\": true,\n    \"strict\": true,\n    \"skipLibCheck\": true,\n    \"forceConsistentCasingInFileNames\": true,\n    \"resolveJsonModule\": true,\n    \"outDir\": \"dist\",\n    \"baseUrl\": \".\",\n    \"paths\": {\n      \"*\": [\"node_modules/*\"]\n    },\n    \"sourceMap\": true\n  },\n  \"include\": [\"src/**/*\", \".eleventy.ts\", \"public/assets/js/**/*\"],\n  \"exclude\": [\"node_modules\", \"dist\"]\n}\n```\n3. Update package.json to include TypeScript compilation scripts:\n```json\n\"scripts\": {\n  \"build:ts\": \"tsc\",\n  \"dev:ts\": \"tsc --watch\",\n  \"type-check\": \"tsc --noEmit\"\n}\n```\n4. Create a types directory with an initial index.d.ts file for shared type definitions.\n<info added on 2025-09-13T04:36:13.332Z>\n5. Verified all required devDependencies are installed:\n   - typescript\n   - ts-node\n   - @types/node\n\n6. Confirmed tsconfig.json has appropriate strict settings and incremental build configuration.\n\n7. Noted that scripts are already configured to preload ts-node/register for Eleventy in development and build processes.\n\n8. Next steps:\n   - Run `npm run type-check` to verify TypeScript configuration\n   - Create a simple .ts file and test the build process\n   - Create the types/ directory with an initial index.d.ts file for shared type definitions if not already present\n</info added on 2025-09-13T04:36:13.332Z>",
        "testStrategy": "Verify TypeScript installation by running 'npx tsc --version'. Validate tsconfig.json by running 'npm run type-check' and ensuring it completes without errors. Test the build process by creating a simple .ts file and confirming it compiles correctly.",
        "priority": "high",
        "dependencies": [],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 2,
        "title": "Create Core Type Definitions",
        "description": "Define shared TypeScript interfaces and types for project metadata, frontmatter, internationalization, date formatting, and content processing.",
        "details": "Create the following type definition files in the types/ directory:\n\n1. `types/eleventy.d.ts` - Eleventy-specific types:\n```typescript\nexport interface EleventyConfig {\n  addPassthroughCopy: (path: string) => void;\n  addFilter: (name: string, fn: Function) => void;\n  addCollection: (name: string, fn: Function) => EleventyCollection;\n  // Add other Eleventy methods as needed\n}\n\nexport interface EleventyCollection {\n  getAll: () => CollectionItem[];\n  getAllSorted: () => CollectionItem[];\n  // Add other collection methods as needed\n}\n\nexport interface CollectionItem {\n  data: {\n    title: string;\n    date: Date;\n    tags?: string[];\n    [key: string]: any;\n  };\n  url: string;\n  inputPath: string;\n  outputPath: string;\n  // Add other properties as needed\n}\n```\n\n2. `types/content.d.ts` - Content and frontmatter types:\n```typescript\nexport interface Frontmatter {\n  title: string;\n  date: string | Date;\n  tags?: string[];\n  lang?: string;\n  description?: string;\n  [key: string]: any;\n}\n\nexport interface ContentItem {\n  data: Frontmatter;\n  content: string;\n  [key: string]: any;\n}\n```\n\n3. `types/i18n.d.ts` - Internationalization types:\n```typescript\nexport interface TranslationDictionary {\n  [key: string]: string | TranslationDictionary;\n}\n\nexport interface I18nConfig {\n  defaultLanguage: string;\n  languages: string[];\n  translations: {\n    [language: string]: TranslationDictionary;\n  };\n}\n```\n\n4. `types/utils.d.ts` - Utility function types:\n```typescript\nexport interface DateFormatOptions {\n  format?: string;\n  locale?: string;\n}\n\nexport interface ContentFilterOptions {\n  tag?: string | string[];\n  language?: string;\n  limit?: number;\n  sortBy?: string;\n  sortOrder?: 'asc' | 'desc';\n}\n```",
        "testStrategy": "Validate type definitions by creating test files that import and use these types. Run TypeScript compiler with 'npm run type-check' to ensure there are no type errors. Create sample objects that implement these interfaces and verify they match the expected structure.",
        "priority": "high",
        "dependencies": [
          1
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 3,
        "title": "Migrate Utility Functions to TypeScript",
        "description": "Convert all utility files in src/utils/ to TypeScript with proper type definitions for i18n, dates, format, and content processing.",
        "details": "For each utility file in src/utils/:\n\n1. Rename the file from .js to .ts\n2. Add appropriate type annotations using the types defined in task #2\n3. Implement proper error handling with type guards\n4. Update import/export statements to use ES6 module syntax\n\nExample for date utility conversion:\n```typescript\n// src/utils/dates.ts\nimport { DateFormatOptions } from '../../types/utils';\n\nexport function formatDate(date: Date | string, options: DateFormatOptions = {}): string {\n  const dateObj = typeof date === 'string' ? new Date(date) : date;\n  const { format = 'yyyy-MM-dd', locale = 'en-US' } = options;\n  \n  // Implementation details...\n  \n  return formattedDate;\n}\n\nexport function isValidDate(date: unknown): date is Date {\n  return date instanceof Date && !isNaN(date.getTime());\n}\n```\n\nExample for i18n utility conversion:\n```typescript\n// src/utils/i18n.ts\nimport { TranslationDictionary, I18nConfig } from '../../types/i18n';\n\nexport function translate(key: string, language: string, translations: I18nConfig['translations']): string {\n  if (!translations[language]) {\n    return key; // Fallback to key if language not found\n  }\n  \n  // Navigate nested translation objects\n  const keyParts = key.split('.');\n  let result: string | TranslationDictionary = translations[language];\n  \n  for (const part of keyParts) {\n    if (typeof result === 'string') {\n      return result;\n    }\n    \n    result = result[part] as string | TranslationDictionary;\n    if (result === undefined) {\n      return key; // Key not found\n    }\n  }\n  \n  return typeof result === 'string' ? result : key;\n}\n```\n\nRepeat this process for all 9 utility files, ensuring type safety throughout.",
        "testStrategy": "Create unit tests for each utility function using a testing framework like Jest. Test with various input types to ensure type safety is working correctly. Verify that existing functionality is preserved by comparing outputs with the original JavaScript implementations. Run the full test suite to ensure all utilities work together correctly.",
        "priority": "high",
        "dependencies": [
          2
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 4,
        "title": "Convert Eleventy Configuration to TypeScript",
        "description": "Migrate the .eleventy.js configuration file to TypeScript with proper type definitions and ensure compatibility with the Eleventy build process.",
        "details": "1. Create a new .eleventy.ts file with the following structure:\n\n```typescript\nimport { EleventyConfig } from './types/eleventy';\n\n// Import utility functions\nimport { formatDate } from './src/utils/dates';\nimport { translate } from './src/utils/i18n';\n// Import other utilities as needed\n\nmodule.exports = function(eleventyConfig: EleventyConfig) {\n  // Add passthrough copy\n  eleventyConfig.addPassthroughCopy('src/assets');\n  \n  // Add filters\n  eleventyConfig.addFilter('formatDate', formatDate);\n  eleventyConfig.addFilter('translate', translate);\n  \n  // Add collections\n  eleventyConfig.addCollection('posts', (collection) => {\n    return collection.getAll().filter(item => {\n      return item.data.tags && item.data.tags.includes('post');\n    });\n  });\n  \n  // Return configuration object\n  return {\n    dir: {\n      input: 'src',\n      output: 'dist',\n      includes: '_includes',\n      layouts: '_layouts',\n      data: '_data'\n    },\n    templateFormats: ['njk', 'md', 'html'],\n    markdownTemplateEngine: 'njk',\n    htmlTemplateEngine: 'njk',\n    dataTemplateEngine: 'njk'\n  };\n};\n```\n\n2. Update package.json scripts to use the TypeScript configuration:\n\n```json\n\"scripts\": {\n  \"build\": \"npm run build:ts && eleventy --config=.eleventy.ts\",\n  \"dev\": \"concurrently \\\"npm run dev:ts\\\" \\\"eleventy --config=.eleventy.ts --serve --watch\\\"\"\n}\n```\n\n3. Install required dependencies for Eleventy to work with TypeScript:\n\n```bash\nnpm install --save-dev ts-node @types/eleventy\n```\n\n4. Create a .eleventy.js wrapper file if needed for compatibility:\n\n```javascript\n// This file is just a wrapper to load the TypeScript configuration\nrequire('ts-node').register();\nmodule.exports = require('./.eleventy.ts');\n```",
        "testStrategy": "Test the Eleventy configuration by running a build with 'npx eleventy --config=.eleventy.ts'. Verify that all collections, filters, and other configuration options work as expected. Compare the output with the previous JavaScript-based build to ensure consistency. Check that all TypeScript types are properly resolved without any 'any' types.",
        "priority": "high",
        "dependencies": [
          2,
          3
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 5,
        "title": "Migrate Data Configuration Files to TypeScript",
        "description": "Convert site.js data file to TypeScript and create type definitions for JSON data files (i18n.json, certifications.json).",
        "details": "1. Convert site.js to site.ts:\n\n```typescript\n// src/_data/site.ts\ninterface SiteConfig {\n  title: string;\n  description: string;\n  url: string;\n  author: {\n    name: string;\n    email: string;\n  };\n  buildTime: Date;\n  [key: string]: any;\n}\n\nconst siteConfig: SiteConfig = {\n  title: 'Portfolio Website',\n  description: 'Personal portfolio and blog',\n  url: 'https://example.com',\n  author: {\n    name: 'Developer Name',\n    email: 'dev@example.com'\n  },\n  buildTime: new Date()\n};\n\nmodule.exports = siteConfig;\n```\n\n2. Create type definitions for JSON data files:\n\n```typescript\n// types/data.d.ts\nexport interface Certification {\n  title: string;\n  issuer: string;\n  date: string;\n  url?: string;\n  skills: string[];\n}\n\nexport interface I18nData {\n  languages: {\n    [code: string]: {\n      name: string;\n      nativeName: string;\n    };\n  };\n  defaultLanguage: string;\n}\n```\n\n3. Create TypeScript interfaces for frontmatter schemas:\n\n```typescript\n// types/frontmatter.d.ts\nexport interface PostFrontmatter {\n  title: string;\n  date: string;\n  tags: string[];\n  description?: string;\n  featured?: boolean;\n  image?: string;\n  lang: string;\n}\n\nexport interface PageFrontmatter {\n  title: string;\n  layout: string;\n  permalink: string;\n  lang: string;\n  [key: string]: any;\n}\n```\n\n4. Update the build process to handle TypeScript data files:\n\n```bash\nnpm install --save-dev @11ty/eleventy-plugin-typescript\n```\n\nAdd to .eleventy.ts:\n```typescript\nconst eleventyPluginTypescript = require('@11ty/eleventy-plugin-typescript');\neleventyConfig.addPlugin(eleventyPluginTypescript);\n```",
        "testStrategy": "Validate data files by running a build and checking that the data is correctly loaded into Eleventy. Create test templates that use the data to ensure it's properly typed and accessible. Verify that JSON data files are correctly typed by importing them in TypeScript files and checking for type errors.",
        "priority": "medium",
        "dependencies": [
          2,
          4
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 6,
        "title": "Convert Client-Side JavaScript to TypeScript",
        "description": "Migrate browser-side JavaScript files to TypeScript with proper DOM type definitions and event handling types.",
        "details": "1. Update the tsconfig.json to include client-side files:\n\n```json\n{\n  \"compilerOptions\": {\n    // Existing options...\n    \"lib\": [\"DOM\", \"DOM.Iterable\", \"ESNext\"],\n    \"outDir\": \"dist/assets/js\"\n  },\n  \"include\": [\n    // Existing includes...\n    \"public/assets/js/**/*\"\n  ]\n}\n```\n\n2. Convert each client-side JavaScript file to TypeScript. Example:\n\n```typescript\n// public/assets/js/navigation.ts\ninterface NavigationOptions {\n  menuSelector: string;\n  toggleSelector: string;\n  activeClass: string;\n}\n\nclass Navigation {\n  private menu: HTMLElement | null;\n  private toggle: HTMLElement | null;\n  private activeClass: string;\n  \n  constructor(options: NavigationOptions) {\n    this.menu = document.querySelector(options.menuSelector);\n    this.toggle = document.querySelector(options.toggleSelector);\n    this.activeClass = options.activeClass;\n    \n    this.init();\n  }\n  \n  private init(): void {\n    if (!this.menu || !this.toggle) return;\n    \n    this.toggle.addEventListener('click', this.toggleMenu.bind(this));\n  }\n  \n  private toggleMenu(event: MouseEvent): void {\n    event.preventDefault();\n    this.menu?.classList.toggle(this.activeClass);\n  }\n}\n\n// Initialize navigation when DOM is loaded\ndocument.addEventListener('DOMContentLoaded', () => {\n  new Navigation({\n    menuSelector: '.nav-menu',\n    toggleSelector: '.nav-toggle',\n    activeClass: 'is-active'\n  });\n});\n```\n\n3. Set up a build process for client-side TypeScript:\n\n```json\n// package.json scripts\n\"scripts\": {\n  \"build:client-ts\": \"tsc -p tsconfig.client.json\",\n  \"dev:client-ts\": \"tsc -p tsconfig.client.json --watch\"\n}\n```\n\n4. Create a separate tsconfig.client.json for client-side code if needed:\n\n```json\n{\n  \"extends\": \"./tsconfig.json\",\n  \"compilerOptions\": {\n    \"target\": \"ES2015\",\n    \"module\": \"ESNext\",\n    \"outDir\": \"public/assets/js\"\n  },\n  \"include\": [\"src/client/**/*.ts\"]\n}\n```\n\n5. Update HTML templates to reference the compiled JavaScript files.",
        "testStrategy": "Test client-side TypeScript by running the build process and checking that the JavaScript files are correctly generated. Manually test the website in different browsers to ensure all interactive features work as expected. Use browser developer tools to check for any JavaScript errors. Consider adding automated browser tests with tools like Cypress or Playwright to verify client-side functionality.",
        "priority": "medium",
        "dependencies": [
          1,
          2
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 7,
        "title": "Integrate TypeScript with Tailwind CSS Configuration",
        "description": "Configure Tailwind CSS to work with TypeScript files and update the build process for integrated compilation.",
        "details": "1. Convert tailwind.config.js to tailwind.config.ts:\n\n```typescript\n// tailwind.config.ts\nimport type { Config } from 'tailwindcss';\n\nconst config: Config = {\n  content: [\n    './src/**/*.{html,njk,md,ts,js}',\n    './public/assets/js/**/*.ts'\n  ],\n  theme: {\n    extend: {\n      // Your theme extensions\n    },\n  },\n  plugins: [\n    // Your plugins\n  ],\n};\n\nexport default config;\n```\n\n2. Install required dependencies:\n\n```bash\nnpm install --save-dev @types/tailwindcss\n```\n\n3. Update PostCSS configuration if needed:\n\n```typescript\n// postcss.config.ts\nexport default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n};\n```\n\n4. Create a CSS processing script that works with TypeScript:\n\n```typescript\n// scripts/build-css.ts\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport postcss from 'postcss';\nimport tailwindcss from 'tailwindcss';\nimport autoprefixer from 'autoprefixer';\n\nasync function buildCss() {\n  const inputFile = path.resolve(__dirname, '../src/assets/css/main.css');\n  const outputFile = path.resolve(__dirname, '../dist/assets/css/main.css');\n  \n  const css = fs.readFileSync(inputFile, 'utf-8');\n  \n  const result = await postcss([\n    tailwindcss,\n    autoprefixer\n  ]).process(css, {\n    from: inputFile,\n    to: outputFile\n  });\n  \n  fs.mkdirSync(path.dirname(outputFile), { recursive: true });\n  fs.writeFileSync(outputFile, result.css);\n  \n  console.log('CSS built successfully');\n}\n\nbuildCss().catch(error => {\n  console.error('Error building CSS:', error);\n  process.exit(1);\n});\n```\n\n5. Update package.json scripts to include CSS processing:\n\n```json\n\"scripts\": {\n  \"build:css\": \"ts-node scripts/build-css.ts\",\n  \"dev:css\": \"npm run build:css -- --watch\",\n  \"build\": \"npm run build:ts && npm run build:css && npm run build:eleventy\"\n}\n```",
        "testStrategy": "Test the Tailwind CSS integration by running the build process and verifying that CSS is correctly generated with all the expected Tailwind utilities. Check that the CSS correctly processes classes used in TypeScript files. Verify that the watch mode works correctly during development. Test the final output in different browsers to ensure CSS is applied correctly.",
        "priority": "medium",
        "dependencies": [
          1,
          4
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 8,
        "title": "Set Up Incremental Compilation for Development Workflow",
        "description": "Configure TypeScript for incremental compilation and implement a development workflow with hot reloading.",
        "details": "1. Update tsconfig.json to enable incremental compilation:\n\n```json\n{\n  \"compilerOptions\": {\n    // Existing options...\n    \"incremental\": true,\n    \"tsBuildInfoFile\": \".tsbuildinfo\",\n    \"composite\": true\n  }\n}\n```\n\n2. Install development dependencies for hot reloading:\n\n```bash\nnpm install --save-dev browser-sync concurrently nodemon\n```\n\n3. Create a development script that coordinates all processes:\n\n```typescript\n// scripts/dev.ts\nimport { spawn } from 'child_process';\nimport * as browserSync from 'browser-sync';\n\n// Start TypeScript compiler in watch mode\nconst tsc = spawn('npx', ['tsc', '--watch'], { stdio: 'inherit' });\n\n// Start Eleventy in watch mode\nconst eleventy = spawn('npx', ['eleventy', '--config=.eleventy.ts', '--serve', '--quiet'], { stdio: 'inherit' });\n\n// Start Tailwind CSS in watch mode\nconst tailwind = spawn('npx', ['tailwindcss', '-i', 'src/assets/css/main.css', '-o', 'dist/assets/css/main.css', '--watch'], { stdio: 'inherit' });\n\n// Initialize Browser-Sync\nconst bs = browserSync.create();\nbs.init({\n  proxy: 'localhost:8080', // Eleventy's default port\n  files: ['dist/**/*'],\n  open: false,\n  notify: false\n});\n\n// Handle process termination\nprocess.on('SIGINT', () => {\n  tsc.kill();\n  eleventy.kill();\n  tailwind.kill();\n  bs.exit();\n  process.exit();\n});\n```\n\n4. Update package.json scripts:\n\n```json\n\"scripts\": {\n  \"dev\": \"ts-node scripts/dev.ts\",\n  \"build\": \"tsc && eleventy --config=.eleventy.ts && tailwindcss -i src/assets/css/main.css -o dist/assets/css/main.css\"\n}\n```\n\n5. Configure nodemon for automatic server restart:\n\n```json\n// nodemon.json\n{\n  \"watch\": [\".eleventy.ts\", \"src/**/*.ts\", \"!src/client/**/*.ts\"],\n  \"ext\": \"ts,json\",\n  \"exec\": \"eleventy --config=.eleventy.ts\"\n}\n```",
        "testStrategy": "Test the development workflow by running 'npm run dev' and verifying that changes to TypeScript files trigger recompilation. Make changes to different types of files (templates, TypeScript utilities, CSS) and confirm that the browser automatically refreshes with the changes. Measure build times to ensure incremental compilation is working efficiently. Test the workflow on different operating systems if applicable.",
        "priority": "medium",
        "dependencies": [
          1,
          4,
          7
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 9,
        "title": "Implement TypeScript Integration with Test Suite",
        "description": "Update test scripts to work with TypeScript and integrate type checking into the test suite.",
        "details": "1. Install testing dependencies:\n\n```bash\nnpm install --save-dev jest ts-jest @types/jest\n```\n\n2. Create Jest configuration for TypeScript:\n\n```typescript\n// jest.config.ts\nimport type { Config } from '@jest/types';\n\nconst config: Config.InitialOptions = {\n  preset: 'ts-jest',\n  testEnvironment: 'node',\n  roots: ['<rootDir>/src'],\n  testMatch: ['**/__tests__/**/*.ts', '**/?(*.)+(spec|test).ts'],\n  transform: {\n    '^.+\\\\.ts$': 'ts-jest'\n  },\n  moduleFileExtensions: ['ts', 'js', 'json'],\n  collectCoverage: true,\n  coverageDirectory: 'coverage',\n  coverageReporters: ['text', 'lcov']\n};\n\nexport default config;\n```\n\n3. Update existing test files to use TypeScript:\n\n```typescript\n// src/utils/__tests__/dates.test.ts\nimport { formatDate, isValidDate } from '../dates';\n\ndescribe('Date utilities', () => {\n  test('formatDate formats dates correctly', () => {\n    const date = new Date('2023-01-15');\n    expect(formatDate(date, { format: 'yyyy-MM-dd' })).toBe('2023-01-15');\n    expect(formatDate('2023-01-15', { format: 'MM/dd/yyyy' })).toBe('01/15/2023');\n  });\n\n  test('isValidDate validates dates correctly', () => {\n    expect(isValidDate(new Date('2023-01-15'))).toBe(true);\n    expect(isValidDate(new Date('invalid'))).toBe(false);\n    expect(isValidDate('not a date')).toBe(false);\n  });\n});\n```\n\n4. Create a script to run type checking as part of the test process:\n\n```typescript\n// scripts/test-with-types.ts\nimport { execSync } from 'child_process';\n\ntry {\n  // Run type checking\n  console.log('Running type checking...');\n  execSync('npx tsc --noEmit', { stdio: 'inherit' });\n  \n  // Run tests if type checking passes\n  console.log('\\nRunning tests...');\n  execSync('npx jest', { stdio: 'inherit' });\n} catch (error) {\n  process.exit(1);\n}\n```\n\n5. Update package.json scripts:\n\n```json\n\"scripts\": {\n  \"test\": \"ts-node scripts/test-with-types.ts\",\n  \"test:unit\": \"jest\",\n  \"test:types\": \"tsc --noEmit\"\n}\n```\n\n6. Set up CI integration in a .github/workflows/ci.yml file (if using GitHub Actions):\n\n```yaml\nname: CI\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v3\n    - name: Use Node.js\n      uses: actions/setup-node@v3\n      with:\n        node-version: '16.x'\n    - run: npm ci\n    - run: npm run test:types\n    - run: npm run test:unit\n    - run: npm run build\n```",
        "testStrategy": "Run the test suite with 'npm test' and verify that both type checking and unit tests are executed. Introduce intentional type errors and test failures to confirm that the process correctly identifies and reports issues. Check that test coverage reports are generated correctly. Verify that the CI configuration works by pushing to a test branch or creating a pull request.",
        "priority": "medium",
        "dependencies": [
          3,
          4,
          6
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 10,
        "title": "Finalize Migration and Documentation",
        "description": "Complete the TypeScript migration by ensuring all files are converted, update documentation, and perform final testing and optimization.",
        "details": "1. Create a TypeScript migration checklist and verify all files have been converted:\n\n```typescript\n// scripts/migration-status.ts\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport * as glob from 'glob';\n\ninterface FileStatus {\n  path: string;\n  converted: boolean;\n}\n\nfunction checkMigrationStatus() {\n  const jsFiles = glob.sync('src/**/*.js').map(file => ({\n    path: file,\n    converted: fs.existsSync(file.replace('.js', '.ts'))\n  }));\n  \n  const unconverted = jsFiles.filter(file => !file.converted);\n  \n  console.log(`Migration Status: ${jsFiles.length - unconverted.length}/${jsFiles.length} files converted`);\n  \n  if (unconverted.length > 0) {\n    console.log('\\nFiles still needing conversion:');\n    unconverted.forEach(file => console.log(`- ${file.path}`));\n  } else {\n    console.log('\\nAll files have been converted to TypeScript!');\n  }\n}\n\ncheckMigrationStatus();\n```\n\n2. Update project documentation:\n\n- Create a MIGRATION.md file documenting the TypeScript migration process\n- Update README.md with TypeScript-specific information\n- Add JSDoc comments to key functions and interfaces\n- Document any breaking changes or API modifications\n\n3. Perform final optimization:\n\n```typescript\n// scripts/optimize.ts\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport { execSync } from 'child_process';\n\n// Run type checking with --noImplicitAny to find any remaining 'any' types\ntry {\n  execSync('npx tsc --noImplicitAny', { stdio: 'inherit' });\n  console.log('No implicit any types found!');\n} catch (error) {\n  console.error('Found implicit any types that should be fixed');\n}\n\n// Check bundle sizes\nconst jsDir = path.resolve(__dirname, '../dist/assets/js');\nconst jsFiles = fs.readdirSync(jsDir).filter(file => file.endsWith('.js'));\n\nconsole.log('\\nJavaScript bundle sizes:');\njsFiles.forEach(file => {\n  const stats = fs.statSync(path.join(jsDir, file));\n  console.log(`- ${file}: ${(stats.size / 1024).toFixed(2)} KB`);\n});\n```\n\n4. Create a final verification script:\n\n```typescript\n// scripts/verify-build.ts\nimport { execSync } from 'child_process';\n\nconsole.log('Running full verification...');\n\ntry {\n  // Clean previous build\n  execSync('rm -rf dist', { stdio: 'inherit' });\n  \n  // Run type checking\n  console.log('\\nVerifying types...');\n  execSync('npm run test:types', { stdio: 'inherit' });\n  \n  // Run tests\n  console.log('\\nRunning tests...');\n  execSync('npm run test:unit', { stdio: 'inherit' });\n  \n  // Build project\n  console.log('\\nBuilding project...');\n  execSync('npm run build', { stdio: 'inherit' });\n  \n  console.log('\\n✅ Verification complete! The TypeScript migration was successful.');\n} catch (error) {\n  console.error('\\n❌ Verification failed. Please fix the issues before considering the migration complete.');\n  process.exit(1);\n}\n```\n\n5. Update package.json scripts:\n\n```json\n\"scripts\": {\n  \"migration:status\": \"ts-node scripts/migration-status.ts\",\n  \"migration:verify\": \"ts-node scripts/verify-build.ts\",\n  \"optimize\": \"ts-node scripts/optimize.ts\"\n}\n```",
        "testStrategy": "Run the migration status script to verify all files have been converted. Execute the verification script to perform a complete build and test cycle. Check documentation for accuracy and completeness. Perform manual testing of the website to ensure all features work correctly. Compare performance metrics before and after the migration to ensure there's no regression. Get feedback from other developers on the team about the TypeScript implementation.",
        "priority": "low",
        "dependencies": [
          3,
          4,
          5,
          6,
          7,
          8,
          9
        ],
        "status": "pending",
        "subtasks": []
      }
    ],
    "metadata": {
      "created": "2025-09-13T04:08:00.503Z",
      "updated": "2025-09-13T05:26:04.045Z",
      "description": "Tasks for typescript-implement context"
    }
  }
}