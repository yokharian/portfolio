# Task ID: 1
# Title: Tailwind CSS Configuration and Theme Setup
# Status: pending
# Dependencies: None
# Priority: high
# Description: Configure Tailwind CSS with custom brand colors, typography scale, and responsive design system to support the design specifications
# Details:
Extend tailwind.config.js to include custom color palette with brand-600 primary accent color, extended gray scale for better contrast, and custom color variables for dynamic tag colors. Configure typography scale with proper heading hierarchy (h1-h6), consistent font weights and line heights, and responsive font sizing. Set up spacing system with consistent padding/margin scales and responsive spacing utilities. Add custom prose styling for blog content with prose-lg configuration. Configure container max-widths and breakpoint system for responsive design.

# Test Strategy:
Verify custom colors render correctly across all design elements, test typography hierarchy on different screen sizes, validate spacing consistency across components, and ensure prose styling works properly for markdown content rendering.

# Subtasks:
## 1. Configure Custom Color Palette [pending]
### Dependencies: None
### Description: Extend the Tailwind theme to include the project's custom color palette, including the primary brand color, an extended gray scale, and a set of colors for dynamic tags.
### Details:
In `tailwind.config.js`, modify the `theme.extend.colors` object. Add a `brand` object with a `600` key for the primary accent color. Replace the default `colors.gray` with an extended palette (e.g., from 50 to 950) to provide more shades for UI elements and text, ensuring better contrast. Add a series of named colors (e.g., `tag-blue`, `tag-green`, `tag-yellow`) for use in blog post tags.

## 2. Set Up Responsive Typography Scale [pending]
### Dependencies: None
### Description: Define a consistent and responsive typography scale for headings (h1-h6) and body text, including font sizes, weights, and line heights.
### Details:
In `tailwind.config.js`, extend the `theme` with a `fontSize` object. Define sizes for `h1` through `h6` and standard text elements (`sm`, `base`, `lg`, `xl`). Use responsive array syntax for key elements to adjust font size across breakpoints, for example: `"5xl": ["3rem", { lineHeight: "1.1" }]`. Also, configure the `fontWeight` and `lineHeight` scales to ensure consistency.

## 3. Configure Layout System: Breakpoints, Spacing, and Containers [pending]
### Dependencies: None
### Description: Establish the core responsive layout system by configuring custom breakpoints, the master spacing scale, and default container properties.
### Details:
In `tailwind.config.js`, define the project's responsive breakpoints (e.g., sm, md, lg, xl, 2xl) in the `theme.screens` object. Review and extend the `theme.spacing` scale if necessary to match design specifications for padding and margins. Configure the `container` properties in the theme to set a `max-width` for each breakpoint and enable `center: true` to auto-margin the main layout container.

## 4. Install and Configure Tailwind Typography Plugin for Prose [pending]
### Dependencies: None
### Description: Install the `@tailwindcss/typography` plugin and configure it to style markdown-rendered content for blog posts, customizing the `prose-lg` variant.
### Details:
Run `npm install -D @tailwindcss/typography`. In `tailwind.config.js`, add `require('@tailwindcss/typography')` to the `plugins` array. Use the `theme.extend.typography` key to customize the default prose styles. Specifically, target the `lg` modifier to adjust styles for headings, links, paragraphs, and code blocks to align with the new brand colors and typography scale.

## 5. Integrate Theme with Global Styles and CSS Variables [pending]
### Dependencies: 1.1
### Description: Update the main `globals.css` file to remove default styles, set base body styles using the new theme, and define CSS variables for dynamic tag colors.
### Details:
In `src/styles/globals.css`, remove the boilerplate `:root` variables from the Next.js starter. Apply base styles to the `body` tag using `@apply` with utilities from the newly configured theme (e.g., `@apply bg-gray-50 text-gray-800;`). Define CSS variables in the `:root` selector for the dynamic tag colors to allow them to be easily applied programmatically in components.

