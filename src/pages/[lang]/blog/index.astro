---
import Layout from '../../../layouts/Layout.astro';
import {getCollection} from 'astro:content';
import {getI18nData, getSiteData} from "../../../data";

const siteData = getSiteData();


// Generate static paths for blog index pages
export async function getStaticPaths() {
  return [
    {params: {lang: 'en'}},
    {params: {lang: 'es'}}
  ];
}

// Get current locale
const currentLocale = Astro.currentLocale || 'en';
const t = getI18nData(currentLocale);

// Get all blog posts
const allPosts = await getCollection('blog');

// Filter posts for current locale posts
const posts = allPosts
  .filter(post => {
    // Check if filename ends with current locale
    const filename = post.id;
    const match = filename.match(/^(.+)\.(en|es)\.md$/);
    if (!match || match[2] !== currentLocale) return false;
    
    // Extract the base slug without language suffix
    const baseSlug = match[1];
    
    // Check if this post should be displayed on main page according to site.json
    return siteData.displayBlogPages[baseSlug]?.["blog-page"] === true;
  })
  .map(post => {
    // Extract the base slug without language suffix
    const filename = post.id;
    const match = filename.match(/^(.+)\.(en|es)\.md$/);
    const baseSlug = match ? match[1] : post.slug;
    
    return {
      ...post,
      baseSlug // Add the base slug without language suffix
    };
  })
  .sort((a, b) => {
    // Sort by pubDate if available, otherwise by startDate, otherwise by slug
    const dateA = a.data.pubDate || a.data.startDate || a.slug;
    const dateB = b.data.pubDate || b.data.startDate || b.slug;
    return new Date(dateB).getTime() - new Date(dateA).getTime();
  });

// Format date helper
function formatDate(date: string | Date): string {
  const d = new Date(date);
  return d.toLocaleDateString(currentLocale, {
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  });
}

// Get featured posts
const regularPosts = posts.filter(post => post.data.featured !== true);
---

<Layout
        title={`Blog | ${siteData.title}`}
        description={`Blog posts and articles by ${siteData.author} - ${siteData.description}`}
        lang={currentLocale}
>
    <div class="mx-auto max-w-6xl px-4 sm:px-6 lg:px-8">
        <header class="py-20 text-center bg-white/90 backdrop-blur-sm rounded-3xl mb-16 shadow-lg">
            <h1 class="text-5xl md:text-6xl font-bold tracking-tight text-gray-900 mb-6">
              {t.blog.title}
            </h1>
            <p class="text-xl md:text-2xl text-gray-600 max-w-3xl mx-auto leading-relaxed">
              {t.blog.subtitle}
            </p>
        </header>

        <section class="bg-gray-50/90 backdrop-blur-sm rounded-3xl p-8 md:p-12 shadow-lg">
          
          {regularPosts.length > 0 ? (
                  <div class="space-y-6">
                    {regularPosts.map((post) => (
                            <article
                                    class="group relative rounded-xl border border-gray-200 bg-white p-6 shadow-md transition-all duration-300 hover:shadow-lg focus-within:shadow-lg hover:-translate-y-1 focus-within:-translate-y-1 hover:bg-gray-50">
                                <a
                                        href={`/${currentLocale}/blog/${post.baseSlug}`}
                                        class="absolute inset-0 rounded-xl focus:outline-none focus-visible:ring-2 focus-visible:ring-brand-500 focus-visible:ring-offset-2 focus-visible:ring-offset-white"
                                        aria-label={`Read ${post.data.title}`}
                                >
                                    <span class="sr-only">Read {post.data.title}</span>
                                </a>

                                <div class="flex gap-4">
                                  {post.data.thumbnail && (
                                          <div class="flex-shrink-0">
                                              <img
                                                      src={post.data.thumbnail}
                                                      alt={post.data.title}
                                                      class="h-20 w-20 rounded-lg object-cover"
                                                      loading="lazy"
                                                      decoding="async"
                                              />
                                          </div>
                                  )}

                                    <div class="flex-1 min-w-0">
                                        <h3 class="text-lg font-semibold text-slate-900 mb-1 group-hover:text-sky-600 transition-colors">
                                          {post.data.title}
                                        </h3>

                                        <p class="text-slate-600 mb-2 line-clamp-2">
                                          {post.data.description}
                                        </p>

                                        <div class="flex items-center justify-between text-sm text-slate-500">
                    <span>
                      {post.data.pubDate ? formatDate(post.data.pubDate) :
                        post.data.startDate ? formatDate(post.data.startDate) :
                          t.common.noDate}
                    </span>
                                          {post.data.employer && (
                                                  <span class="text-sky-600 font-medium">
                        {post.data.employer}
                      </span>
                                          )}
                                        </div>
                                      
                                      {post.data.tags && post.data.tags.length > 0 && (
                                              <div class="mt-2 flex flex-wrap gap-1">
                                                {post.data.tags.slice(0, 4).map((tag: any) => (
                                                        <span
                                                                class="inline-block rounded px-2 py-1 text-xs font-medium"
                                                                style={`background-color: ${tag.color}; color: ${tag.color.replace('hsla(', 'hsla(').replace(/,\s*[0-9.]+\)$/, ', 1)')}`}
                                                        >
                          {tag.name}
                        </span>
                                                ))}
                                              </div>
                                      )}
                                    </div>
                                </div>
                            </article>
                    ))}
                  </div>
          ) : (
                  <div class="text-center py-12">
                      <p class="text-slate-600">{t.common.noPosts}</p>
                  </div>
          )}
        </section>
    </div>
</Layout>

<style>
    .line-clamp-2 {
        display: -webkit-box;
        -webkit-line-clamp: 2;
        -webkit-box-orient: vertical;
        overflow: hidden;
    }

    .line-clamp-3 {
        display: -webkit-box;
        -webkit-line-clamp: 3;
        -webkit-box-orient: vertical;
        overflow: hidden;
    }
</style>
